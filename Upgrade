Role: Lead engineer + technical writer performing a docs↔code parity drive for the StratMaster repo.

Context (repo-specific):
- Monorepo, Python-first. Key dirs: /.github, /.githooks, /.trunk, /apps, /packages, /docs, /ops, /infra, /helm, /docker, /scripts, /tests, /seeds, /prompts; plus root files: README.md, PROJECT.md, SECURITY.md, ALPHA_READINESS_SUMMARY.md, IMPLEMENTATION_SUMMARY.md, ENHANCED_IMPLEMENTATION.md, PHASE3_GAP_ANALYSIS.md, docker-compose.yml, Makefile, ruff.toml, mypy.ini, pytest.ini, requirements*.txt/lock. 
- API: FastAPI app factory; multiple MCP servers; docker-compose + Helm (GitOps); pre-commit/ruff/mypy/pytest configured.

Objectives:
1) Docs↔Code Parity:
   - Build a matrix of claims/features in /docs and root *.md files (README.md, PROJECT.md, IMPLEMENTATION_*.md, PHASE3_GAP_ANALYSIS.md, ALPHA_READINESS_SUMMARY.md) vs actual code artifacts in /apps, /packages, /ops, /infra, /helm.
   - For each documented feature, locate the corresponding module, routes, handlers, services, configs, Helm values, and tests. Mark status = {implemented, partially implemented, missing}.
   - Where “future plans”, “phase/sprint” notes, or placeholders exist, either (a) implement the minimum viable, production-safe slice now, or (b) create a precise TODO with file/line anchors and open a draft PR checklist item. Replace “Sprint/Phase” phrasing with release-oriented language.

2) Directory & wiring correctness:
   - Enforce the intended layout (see Context). Ensure import paths, app startup, router inclusion, settings/env, and service clients are wired and referenced consistently across API, MCP services, scripts, docker-compose, Helm charts, and Makefile targets.
   - Verify Helm charts/values reference current image tags and env vars; align compose/Helm ports and health endpoints; ensure secrets and config maps are declared and consumed in a least-surprise way.

3) Test coverage & smoke checks:
   - Ensure pytest discovers and runs fast API tests and integration tests; add/repair tests for each public API route and critical service boundary; add a smoke test for /healthz and OpenAPI /docs.
   - Guarantee ruff and mypy pass with repo settings; add missing type hints where trivial; avoid broad “type: ignore” unless justified inline.

4) Documentation curation to Diátaxis:
   - Reorganise /docs into tutorials, how-to guides, reference, and explanations. Add an index/TOC. Cross-link to code, tests, and ops scripts. Remove stale sprint/phase artefacts or move them to /docs/_archive with an explanatory note.
   - Keep SECURITY.md and Operations/Runbooks accurate; link to health checks, ports, Make targets, compose/Helm entry points.

Deliverables (commit/PR plan):
- Commit set with Conventional Commits. Include:
  a) A machine-readable docs↔code parity report at /docs/parity-report.md (tables with links).
  b) Added/updated tests; green `make test` locally.
  c) Fixed wiring (imports/routers/settings), updated compose/Helm where needed.
  d) Curated /docs to Diátaxis sections with cross-links.
- Open a single PR: title “chore: docs↔code parity & release-prep”. Checklist must include: unit+integration tests pass; ruff/mypy clean; compose up; helm lint; smoke test; docs pass Diátaxis; no “Sprint/Phase” language in public docs.

Safety & constraints:
- No destructive deletes: move clearly obsolete docs to /docs/_archive with a short rationale; otherwise propose deletions in the PR description.
- Keep external secrets out of VCS. If a setting is missing, gate with env var and document defaults.
- Prefer minimal, safe implementations over speculative features. If a “future plan” needs non-trivial design, create a scoped TODO + PR task instead.

Acceptance criteria (must meet before finishing):
- `make bootstrap && make test` passes locally; `ruff` and `mypy` clean.
- `scripts/smoke_api.py` succeeds; /healthz returns 200; /docs renders.
- `helm lint` for stratmaster charts passes; docker-compose services start with documented ports.
- /docs contains TOC + the four Diátaxis sections, each linking to code and tests.
- /docs/parity-report.md shows 100% mapped or explicitly gated items.

Execution steps (what to do now):
1) Scan repo to build the parity matrix; produce /docs/parity-report.md.
2) Implement or gate missing items; update wiring (routers, DI, settings).
3) Add/repair tests; ensure pytest collection/smoke work.
4) Curate /docs into Diátaxis; scrub “Sprint/Phase” language from public docs, keeping historical notes in /docs/_archive as needed.
5) Run ruff, mypy, pytest; lint Helm; validate compose; update README Quick Start if commands changed.
6) Produce a concise PR with the checklist and rationale. 
