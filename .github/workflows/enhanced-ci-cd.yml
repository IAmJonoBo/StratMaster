name: Enhanced CI/CD with Self-Healing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run health checks daily at 6 AM UTC
    - cron: '0 6 * * *'

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'

jobs:
  health-check:
    name: System Health Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl lsof
        
    - name: Install monitoring dependencies
      run: |
        pip install psutil requests pyyaml
        
    - name: Validate dependency registry
      run: |
        python scripts/register_dependencies.py validate
        
    - name: Run comprehensive health check
      id: health_check
      run: |
        python scripts/system_health_monitor.py check --all > health_report.json
        echo "health_status=$(jq -r '.overall_status' health_report.json)" >> $GITHUB_OUTPUT
        
    - name: Upload health report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: health-report-${{ github.run_number }}
        path: health_report.json
        retention-days: 30
        
    - name: Auto-heal on critical issues
      if: steps.health_check.outputs.health_status == 'critical'
      run: |
        echo "🚑 Critical health status detected, attempting auto-healing..."
        python scripts/self_healing.py analyze --auto-heal --output healing_report.json
        
    - name: Upload healing report
      uses: actions/upload-artifact@v4
      if: steps.health_check.outputs.health_status == 'critical'
      with:
        name: healing-report-${{ github.run_number }}
        path: healing_report.json
        retention-days: 30

  robust-build:
    name: Robust Build with Network Resilience
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: health-check
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13']
      fail-fast: false
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Create system snapshot
      id: snapshot
      run: |
        python scripts/self_healing.py snapshot
        echo "snapshot_id=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT
        
    - name: Bootstrap with network resilience
      run: |
        python scripts/robust_installer.py cache-warmup
        make bootstrap.robust
        
    - name: Validate environment
      run: |
        python scripts/robust_installer.py validate-environment
        python scripts/system_health_monitor.py check --dependencies-only
        
    - name: Run tests with self-healing fallback
      id: test_run
      run: |
        # Run tests with timeout and auto-recovery
        timeout 600 make test || echo "test_failed=true" >> $GITHUB_OUTPUT
        
    - name: Auto-heal on test failures
      if: steps.test_run.outputs.test_failed == 'true'
      run: |
        echo "🔧 Tests failed, attempting automated recovery..."
        python scripts/self_healing.py recover --dependencies
        python scripts/self_healing.py recover --environment
        # Retry tests after healing
        make test
        
    - name: Generate build report
      if: always()
      run: |
        python scripts/system_health_monitor.py report --format json --output build_report_py${{ matrix.python-version }}.json
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-report-py${{ matrix.python-version }}-${{ github.run_number }}
        path: build_report_py${{ matrix.python-version }}.json
        retention-days: 14

  security-scan:
    name: Security Scanning with Auto-Remediation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: health-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install security tools
      run: |
        pip install safety bandit semgrep
        
    - name: Run security vulnerability scan
      id: security_scan
      continue-on-error: true
      run: |
        python scripts/system_health_monitor.py check --dependencies-only > security_report.json
        # Check if critical vulnerabilities found
        if jq -r '.checks[] | select(.name=="security_vulnerabilities") | .status' security_report.json | grep -q "critical"; then
          echo "critical_vulns=true" >> $GITHUB_OUTPUT
        fi
        
    - name: Auto-remediate security issues
      if: steps.security_scan.outputs.critical_vulns == 'true'
      run: |
        echo "🛡️ Critical vulnerabilities detected, attempting remediation..."
        python scripts/self_healing.py recover --dependencies
        # Re-run security scan after remediation
        python scripts/system_health_monitor.py check --dependencies-only > security_report_after.json
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ github.run_number }}
        path: security_report*.json
        retention-days: 30

  dependency-management:
    name: Intelligent Dependency Management
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: health-check
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[update-deps]')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Create dependency snapshot
      run: |
        python scripts/self_healing.py snapshot
        
    - name: Check for dependency updates
      id: dep_check
      run: |
        python scripts/dependency_upgrade.py check > dep_check.txt
        if grep -q "updates available" dep_check.txt; then
          echo "updates_available=true" >> $GITHUB_OUTPUT
        fi
        
    - name: Apply safe dependency updates
      if: steps.dep_check.outputs.updates_available == 'true'
      run: |
        python scripts/dependency_upgrade.py upgrade --type patch --dry-run
        python scripts/dependency_upgrade.py upgrade --type patch
        
    - name: Validate updated dependencies
      if: steps.dep_check.outputs.updates_available == 'true'
      run: |
        python scripts/robust_installer.py validate-environment
        make test
        
    - name: Create pull request for dependency updates
      if: steps.dep_check.outputs.updates_available == 'true'
      uses: peter-evans/create-pull-request@v7
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore: update dependencies [automated]"
        title: "🔄 Automated dependency updates"
        body: |
          ## 📦 Automated Dependency Updates
          
          This PR contains automated dependency updates applied by the intelligent dependency management system.
          
          ### Changes Applied:
          - Safe patch-level updates only
          - All tests passed after updates
          - Environment validation successful
          
          ### Validation:
          - ✅ Dependency conflicts resolved
          - ✅ Security vulnerabilities checked
          - ✅ Tests passed
          - ✅ Environment validated
          
          This PR was created automatically by the self-healing CI/CD system.
        branch: automated-dependency-updates
        delete-branch: true

  deployment-readiness:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [robust-build, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install deployment dependencies
      run: |
        pip install psutil requests pyyaml
        
    - name: Validate deployment readiness
      run: |
        python scripts/system_health_monitor.py check --all
        python scripts/deploy.py validate-environment
        
    - name: Create deployment snapshot
      run: |
        python scripts/self_healing.py snapshot > deployment_snapshot.txt
        echo "DEPLOYMENT_SNAPSHOT=$(cat deployment_snapshot.txt | grep 'Created snapshot' | cut -d' ' -f3)" >> $GITHUB_ENV
        
    - name: Generate deployment report
      run: |
        python scripts/system_health_monitor.py report --format json --output deployment_readiness.json
        
    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-readiness-${{ github.run_number }}
        path: |
          deployment_readiness.json
          deployment_snapshot.txt
        retention-days: 30
        
    - name: Set deployment output
      id: deployment
      run: |
        echo "ready=true" >> $GITHUB_OUTPUT
        echo "snapshot_id=${{ env.DEPLOYMENT_SNAPSHOT }}" >> $GITHUB_OUTPUT

  monitoring-setup:
    name: Setup Continuous Monitoring
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: deployment-readiness
    if: github.ref == 'refs/heads/main' && needs.deployment-readiness.outputs.ready == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install monitoring dependencies
      run: |
        pip install psutil requests pyyaml
        
    - name: Start health monitoring
      run: |
        # This would integrate with your monitoring infrastructure
        python scripts/system_health_monitor.py export-metrics > monitoring_baseline.json
        echo "🔍 Monitoring baseline established"
        
    - name: Setup alerting configuration
      run: |
        # Configure alerting thresholds
        cat > monitoring_config.json << EOF
        {
          "health_check_interval": 300,
          "critical_threshold": 0.95,
          "auto_heal_enabled": true,
          "snapshot_retention": 168
        }
        EOF
        
    - name: Upload monitoring configuration
      uses: actions/upload-artifact@v4
      with:
        name: monitoring-config-${{ github.run_number }}
        path: |
          monitoring_baseline.json
          monitoring_config.json
        retention-days: 90

  # Failure notification and recovery
  failure-recovery:
    name: Automated Failure Recovery
    runs-on: ubuntu-latest
    if: always() && (needs.robust-build.result == 'failure' || needs.security-scan.result == 'failure')
    needs: [robust-build, security-scan]
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install recovery tools
      run: |
        pip install psutil requests pyyaml
        
    - name: Attempt automated recovery
      run: |
        echo "🚑 Pipeline failure detected, initiating recovery procedures..."
        python scripts/self_healing.py analyze --auto-heal --output recovery_report.json
        
    - name: Generate failure report
      run: |
        cat > failure_report.md << EOF
        # 🚨 CI/CD Pipeline Failure Report
        
        **Timestamp**: $(date -u)
        **Branch**: ${{ github.ref }}
        **Commit**: ${{ github.sha }}
        **Run**: ${{ github.run_number }}
        
        ## Failed Jobs:
        - Build Status: ${{ needs.robust-build.result }}
        - Security Scan: ${{ needs.security-scan.result }}
        
        ## Recovery Actions Taken:
        - Automated healing attempted
        - System snapshot available for rollback
        - Recovery report generated
        
        ## Next Steps:
        1. Review recovery report
        2. Check system health dashboard
        3. Manual intervention if needed
        
        EOF
        
    - name: Upload failure artifacts
      uses: actions/upload-artifact@v4
      with:
        name: failure-recovery-${{ github.run_number }}
        path: |
          recovery_report.json
          failure_report.md
        retention-days: 60
        
    - name: Create issue for manual review
      if: github.ref == 'refs/heads/main'
      uses: actions/github-script@v8
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🚨 CI/CD Pipeline Failure - Requires Manual Review',
            body: `## Pipeline Failure Alert
            
            **Run**: ${{ github.run_number }}
            **Branch**: ${{ github.ref }}
            **Commit**: ${{ github.sha }}
            
            Automated recovery has been attempted. Please review the failure artifacts and take appropriate action.
            
            - [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - Recovery artifacts uploaded
            - System snapshots available
            
            /cc @${{ github.actor }}`,
            labels: ['bug', 'ci-failure', 'needs-investigation']
          })